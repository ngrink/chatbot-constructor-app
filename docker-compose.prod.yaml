version: "3.8"
services:
  server:
    container_name: gigabot_server
    build:
      context: ./services/server
      dockerfile: .dockerfile
    environment:
      - NODE_ENV=production
    networks:
      - frontend
      - backend
    ports:
      - 8001:7000
    depends_on:
      server_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:7000/api/v1/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped

  core:
    container_name: gigabot_core
    build:
      context: ./services/core
      dockerfile: .dockerfile
    environment:
      - NODE_ENV=production
    networks:
      - backend
    ports:
      - 8002:7001
    depends_on:
      server:
        condition: service_healthy
    restart: unless-stopped

  server_db:
    container_name: gigabot_server_db
    image: postgres:15.3-alpine3.18
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=server_db
    volumes:
      - ./volumes/server_db/data:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U root -d server_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped


networks:
  frontend:
    name: gigabot_frontend
  backend:
    name: gigabot_backend
